{"version":3,"sources":["../index.js"],"names":["options","hook","item","Array","isArray","data","Promise","all","map","computeProperties","computeResults","properties","Object","keys","promises","property","propertyOptions","fetchProperty","$fetch","fetcher","call","app","e","console","error","debug","result","require"],"mappings":";;;;;;kBAEe,UAAUA,OAAV,EAAmB;AAChC;AAAA,iCAAO,WAAgBC,IAAhB,EAAsB;;AAM3B;AAN2B;AAAA,sCAO3B,WAA+BC,IAA/B,EAAqCF,OAArC,EAA8C;AAC5C;AACA,cAAIG,MAAMC,OAAN,CAAcF,KAAKG,IAAnB,CAAJ,EAA8B;AAC5B;AACAH,iBAAKG,IAAL,GAAY,MAAMC,QAAQC,GAAR,CAAYL,KAAKG,IAAL,CAAUG,GAAV,CAAc,gBAAQ;AAClD,qBAAOC,kBAAkBP,IAAlB,EAAwBF,OAAxB,CAAP;AACD,aAF6B,CAAZ,CAAlB;;AAIA,mBAAOE,IAAP;AACD;;AAED;AACA,iBAAOO,kBAAkBP,IAAlB,EAAwBF,OAAxB,CAAP;AACD,SApB0B;;AAAA,wBAOZU,cAPY;AAAA;AAAA;AAAA;;AAsB3B;;;AAtB2B;AAAA,sCAuB3B,WAAkCR,IAAlC,EAAwCF,OAAxC,EAAiD;AAC/C,gBAAMW,aAAaC,OAAOC,IAAP,CAAYb,OAAZ,CAAnB;;AAEA;AACA,gBAAMc,WAAWH,WAAWH,GAAX;AAAA,0CAAe,WAAMO,QAAN,EAAkB;AAChD,oBAAMC,kBAAkBhB,QAAQe,QAAR,CAAxB;;AAEA,kBAAIV,OAAO,MAAMY,cAAcD,gBAAgBE,MAA9B,EAAsChB,IAAtC,CAAjB;;AAEA,qBAAOc,gBAAgBE,MAAvB;;AAEA,kBAAIb,SAAS,IAAb,EAAmB;AACjBA,uBAAO,MAAMK,eAAeL,IAAf,EAAqBW,eAArB,CAAb;AACD;;AAEDd,mBAAKa,QAAL,IAAiBV,IAAjB;;AAEA,qBAAO,IAAP;AACD,aAdgB;;AAAA;AAAA;AAAA;AAAA,eAAjB;;AAgBA,gBAAMC,QAAQC,GAAR,CAAYO,QAAZ,CAAN;;AAEA,iBAAOZ,IAAP;AACD,SA9C0B;;AAAA,wBAuBZO,iBAvBY;AAAA;AAAA;AAAA;;AAgD3B;;;AAhD2B;AAAA,sCAiD3B,WAA8BU,OAA9B,EAAuCjB,IAAvC,EAA6C;AAC3C,cAAI;AACF,mBAAOiB,QAAQC,IAAR,CAAalB,IAAb,EAAmBD,KAAKoB,GAAxB,CAAP;AACD,WAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,oBAAQC,KAAR,CAAcF,CAAd;AACAG,kBAAMH,CAAN;AACA,mBAAO,IAAP;AACD;AACF,SAzD0B;;AAAA,wBAiDZL,aAjDY;AAAA;AAAA;AAAA;;AAC3B;AACAhB,WAAKyB,MAAL,GAAc,MAAMhB,eAAeT,KAAKyB,MAApB,EAA4B1B,OAA5B,CAApB;;AAEA,aAAOC,IAAP;AAsDD,KA1DD;;AAAA;AAAA;AAAA;AAAA;AA2DD,C;;;;AA9DD,MAAMwB,QAAQE,QAAQ,OAAR,EAAiB,qBAAjB,CAAd","file":"index.js","sourcesContent":["const debug = require('debug')('feathers-hook-fetch')\n\nexport default function (options) {\n  return async function (hook) {\n    // return a promise that resolves to the hook\n    hook.result = await computeResults(hook.result, options)\n\n    return hook\n\n    // returns a promise that resolves to an item (or array of items)\n    async function computeResults (item, options) {\n      // an object with paginated items\n      if (Array.isArray(item.data)) {\n        // process each item concurrently\n        item.data = await Promise.all(item.data.map(item => {\n          return computeProperties(item, options)\n        }))\n\n        return item\n      }\n\n      // a single item\n      return computeProperties(item, options)\n    }\n\n    // returns a promise that resolves to the item\n    async function computeProperties (item, options) {\n      const properties = Object.keys(options)\n\n      // process each property\n      const promises = properties.map(async property => {\n        const propertyOptions = options[property]\n\n        let data = await fetchProperty(propertyOptions.$fetch, item)\n\n        delete propertyOptions.$fetch\n\n        if (data !== null) {\n          data = await computeResults(data, propertyOptions)\n        }\n\n        item[property] = data\n\n        return true\n      })\n\n      await Promise.all(promises)\n\n      return item\n    }\n\n    // returns a promise that resolves to the data\n    async function fetchProperty (fetcher, item) {\n      try {\n        return fetcher.call(item, hook.app)\n      } catch (e) {\n        console.error(e)\n        debug(e)\n        return null\n      }\n    }\n  }\n}\n"]}