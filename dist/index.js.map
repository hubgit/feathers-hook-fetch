{"version":3,"sources":["../index.js"],"names":["options","hook","computeProperties","item","Promise","all","Object","keys","map","property","$fetch","propertyOptions","call","app","e","console","error","debug","computeResults","items","Array","isArray","data","result","require"],"mappings":";;;;;;kBAEe,UAAUA,OAAV,EAAmB;AAChC;AAAA,iCAAO,WAAgBC,IAAhB,EAAsB;AAC3B,YAAMC;AAAA,sCAAoB,WAAOC,IAAP,EAAaH,OAAb,EAAyB;AACjD,gBAAMI,QAAQC,GAAR,CAAYC,OAAOC,IAAP,CAAYP,OAAZ,EAAqBQ,GAArB;AAAA,0CAAyB,WAAMC,QAAN,EAAkB;AAAA,sCACpBT,QAAQS,QAAR,CADoB;;AAAA,oBACnDC,MADmD,qBACnDA,MADmD;AAAA,oBACxCC,eADwC;;AAG3D,kBAAI;AACFR,qBAAKM,QAAL,IAAiB,MAAMC,OAAOE,IAAP,CAAYT,IAAZ,EAAkBF,KAAKY,GAAvB,CAAvB;AACD,eAFD,CAEE,OAAOC,CAAP,EAAU;AACVX,qBAAKM,QAAL,IAAiB,IAAjB;AACAM,wBAAQC,KAAR,CAAcF,CAAd;AACAG,sBAAMH,CAAN;AACA;AACD;;AAED,oBAAMI,eAAef,KAAKM,QAAL,CAAf,EAA+BE,eAA/B,CAAN;AACD,aAbiB;;AAAA;AAAA;AAAA;AAAA,eAAZ,CAAN;AAcD,SAfK;;AAAA;AAAA;AAAA;AAAA,UAAN;;AAiBA,YAAMO,iBAAiB,SAAjBA,cAAiB,CAACf,IAAD,EAAOH,OAAP,EAAmB;AACxC,cAAMmB,QAAQC,MAAMC,OAAN,CAAclB,KAAKmB,IAAnB,IAA2BnB,KAAKmB,IAAhC,GAAwCF,MAAMC,OAAN,CAAclB,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAAnF;;AAEA,eAAOC,QAAQC,GAAR,CAAYc,MAAMX,GAAN,CAAU;AAAA,iBAAQN,kBAAkBC,IAAlB,EAAwBH,OAAxB,CAAR;AAAA,SAAV,CAAZ,CAAP;AACD,OAJD;;AAMA,YAAMkB,eAAejB,KAAKsB,MAApB,EAA4BvB,OAA5B,CAAN;;AAEA,aAAOC,IAAP;AACD,KA3BD;;AAAA;AAAA;AAAA;AAAA;AA4BD,C;;;;;;AA/BD,MAAMgB,QAAQO,QAAQ,OAAR,EAAiB,qBAAjB,CAAd","file":"index.js","sourcesContent":["const debug = require('debug')('feathers-hook-fetch')\n\nexport default function (options) {\n  return async function (hook) {\n    const computeProperties = async (item, options) => {\n      await Promise.all(Object.keys(options).map(async property => {\n        const { $fetch, ...propertyOptions } = options[property]\n\n        try {\n          item[property] = await $fetch.call(item, hook.app)\n        } catch (e) {\n          item[property] = null\n          console.error(e)\n          debug(e)\n          return\n        }\n\n        await computeResults(item[property], propertyOptions)\n      }))\n    }\n\n    const computeResults = (item, options) => {\n      const items = Array.isArray(item.data) ? item.data : (Array.isArray(item) ? item : [item])\n\n      return Promise.all(items.map(item => computeProperties(item, options)))\n    }\n\n    await computeResults(hook.result, options)\n\n    return hook\n  }\n}\n"]}