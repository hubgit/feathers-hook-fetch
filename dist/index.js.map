{"version":3,"sources":["../index.js"],"names":["options","hook","item","Array","isArray","data","Promise","all","map","computeProperties","computeResults","result","properties","Object","keys","forEach","property","propertyOptions","fetchProperty","$fetch","resolve","fetcher","call","app","e","debug","require"],"mappings":";;;;;;kBAEe,UAAUA,OAAV,EAAmB;AAChC;AAAA,iCAAO,WAAgBC,IAAhB,EAAsB;;AAM3B;AAN2B;AAAA,sCAO3B,WAA+BC,IAA/B,EAAqCF,OAArC,EAA8C;AAC5C;AACA,cAAIG,MAAMC,OAAN,CAAcF,KAAKG,IAAnB,CAAJ,EAA8B;AAC5B;AACAH,iBAAKG,IAAL,GAAY,MAAMC,QAAQC,GAAR,CAAYL,KAAKG,IAAL,CAAUG,GAAV,CAAc,gBAAQ;AAClD,qBAAOC,kBAAkBP,IAAlB,EAAwBF,OAAxB,CAAP;AACD,aAF6B,CAAZ,CAAlB;;AAIA,mBAAOE,IAAP;AACD;;AAED;AACA,iBAAOO,kBAAkBP,IAAlB,EAAwBF,OAAxB,CAAP;AACD,SApB0B;;AAAA,wBAOZU,cAPY;AAAA;AAAA;AAAA;;AAsB3B;;;AArBA;AACAT,WAAKU,MAAL,GAAc,MAAMD,eAAeT,KAAKU,MAApB,EAA4BX,OAA5B,CAApB;;AAEA,aAAOC,IAAP,CAmBA,SAASQ,iBAAT,CAA4BP,IAA5B,EAAkCF,OAAlC,EAA2C;AACzC,cAAMY,aAAaC,OAAOC,IAAP,CAAYd,OAAZ,CAAnB;;AAEA;AACAY,mBAAWG,OAAX;AAAA,wCAAmB,WAAMC,QAAN,EAAkB;AACnC,kBAAMC,kBAAkBjB,QAAQgB,QAAR,CAAxB;;AAEA,gBAAIX,OAAO,MAAMa,cAAcD,gBAAgBE,MAA9B,EAAsCjB,IAAtC,CAAjB;;AAEA,mBAAOe,gBAAgBE,MAAvB;;AAEA,gBAAId,SAAS,IAAb,EAAmB;AACjBA,qBAAO,MAAMK,eAAeL,IAAf,EAAqBY,eAArB,CAAb;AACD;;AAEDf,iBAAKc,QAAL,IAAiBX,IAAjB;AACD,WAZD;;AAAA;AAAA;AAAA;AAAA;;AAcA,eAAOC,QAAQc,OAAR,CAAgBlB,IAAhB,CAAP;AACD;;AAED;AACA,eAASgB,aAAT,CAAwBG,OAAxB,EAAiCnB,IAAjC,EAAuC;AACrC,YAAI;AACF,iBAAOmB,QAAQC,IAAR,CAAapB,IAAb,EAAmBD,KAAKsB,GAAxB,CAAP;AACD,SAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACAC,gBAAMD,CAAN;AACA,iBAAOlB,QAAQc,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF;AACF,KAtDD;;AAAA;AAAA;AAAA;AAAA;AAuDD,C;;;;AA1DD,MAAMK,QAAQC,QAAQ,OAAR,EAAiB,qBAAjB,CAAd","file":"index.js","sourcesContent":["const debug = require('debug')('feathers-hook-fetch')\n\nexport default function (options) {\n  return async function (hook) {\n    // return a promise that resolves to the hook\n    hook.result = await computeResults(hook.result, options)\n\n    return hook\n\n    // returns a promise that resolves to an item (or array of items)\n    async function computeResults (item, options) {\n      // an object with paginated items\n      if (Array.isArray(item.data)) {\n        // process each item concurrently\n        item.data = await Promise.all(item.data.map(item => {\n          return computeProperties(item, options)\n        }))\n\n        return item\n      }\n\n      // a single item\n      return computeProperties(item, options)\n    }\n\n    // returns a promise that resolves to the item\n    function computeProperties (item, options) {\n      const properties = Object.keys(options)\n\n      // process each property\n      properties.forEach(async property => {\n        const propertyOptions = options[property]\n\n        let data = await fetchProperty(propertyOptions.$fetch, item)\n\n        delete propertyOptions.$fetch\n\n        if (data !== null) {\n          data = await computeResults(data, propertyOptions)\n        }\n\n        item[property] = data\n      })\n\n      return Promise.resolve(item)\n    }\n\n    // returns a promise that resolves to the data\n    function fetchProperty (fetcher, item) {\n      try {\n        return fetcher.call(item, hook.app)\n      } catch (e) {\n        // console.error(e)\n        debug(e)\n        return Promise.resolve(null)\n      }\n    }\n  }\n}\n"]}