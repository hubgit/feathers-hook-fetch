{"version":3,"sources":["../index.js"],"names":["options","hook","computeResults","result","then","item","Array","isArray","data","Promise","all","map","computeProperties","properties","Object","keys","forEach","property","propertyOptions","fetchProperty","$fetch","resolve","fetcher","call","app","e","debug","require"],"mappings":";;;;;;kBAEe,UAAUA,OAAV,EAAmB;AAChC,SAAO,UAAUC,IAAV,EAAgB;AACrB;AACA,WAAOC,eAAeD,KAAKE,MAApB,EAA4BH,OAA5B,EAAqCI,IAArC,CAA0CD,UAAU;AACzDF,WAAKE,MAAL,GAAcA,MAAd;AACA,aAAOF,IAAP;AACD,KAHM,CAAP;;AAKA;AACA,aAASC,cAAT,CAAyBG,IAAzB,EAA+BL,OAA/B,EAAwC;AACtC;AACA,UAAIM,MAAMC,OAAN,CAAcF,KAAKG,IAAnB,CAAJ,EAA8B;AAC5B;AACA,eAAOC,QAAQC,GAAR,CAAYL,KAAKG,IAAL,CAAUG,GAAV,CAAcN,QAAQ;AACvC,iBAAOO,kBAAkBP,IAAlB,EAAwBL,OAAxB,CAAP;AACD,SAFkB,CAAZ,CAAP;AAGD;;AAED;AACA,aAAOY,kBAAkBP,IAAlB,EAAwBL,OAAxB,CAAP;AACD;;AAED;AACA,aAASY,iBAAT,CAA4BP,IAA5B,EAAkCL,OAAlC,EAA2C;AACzC,YAAMa,aAAaC,OAAOC,IAAP,CAAYf,OAAZ,CAAnB;;AAEA;AACAa,iBAAWG,OAAX;AAAA,qCAAmB,WAAMC,QAAN,EAAkB;AACnC,gBAAMC,kBAAkBlB,QAAQiB,QAAR,CAAxB;;AAEA,cAAIT,OAAO,MAAMW,cAAcD,gBAAgBE,MAA9B,EAAsCf,IAAtC,CAAjB;;AAEA,iBAAOa,gBAAgBE,MAAvB;;AAEA,cAAIZ,SAAS,IAAb,EAAmB;AACjBA,mBAAO,MAAMN,eAAeM,IAAf,EAAqBU,eAArB,CAAb;AACD;;AAEDb,eAAKY,QAAL,IAAiBT,IAAjB;AACD,SAZD;;AAAA;AAAA;AAAA;AAAA;;AAcA,aAAOC,QAAQY,OAAR,CAAgBhB,IAAhB,CAAP;AACD;;AAED;AACA,aAASc,aAAT,CAAwBG,OAAxB,EAAiCjB,IAAjC,EAAuC;AACrC,UAAI;AACF,eAAOiB,QAAQC,IAAR,CAAalB,IAAb,EAAmBJ,KAAKuB,GAAxB,CAAP;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACAC,cAAMD,CAAN;AACA,eAAOhB,QAAQY,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF;AACF,GArDD;AAsDD,C;;;;AAzDD,MAAMK,QAAQC,QAAQ,OAAR,EAAiB,qBAAjB,CAAd","file":"index.js","sourcesContent":["const debug = require('debug')('feathers-hook-fetch')\n\nexport default function (options) {\n  return function (hook) {\n    // return a promise that resolves to the hook\n    return computeResults(hook.result, options).then(result => {\n      hook.result = result\n      return hook\n    })\n\n    // returns a promise that resolves to an item (or array of items)\n    function computeResults (item, options) {\n      // an object with paginated items\n      if (Array.isArray(item.data)) {\n        // process each item concurrently\n        return Promise.all(item.data.map(item => {\n          return computeProperties(item, options)\n        }))\n      }\n\n      // a single item\n      return computeProperties(item, options)\n    }\n\n    // returns a promise that resolves to the item\n    function computeProperties (item, options) {\n      const properties = Object.keys(options)\n\n      // process each property\n      properties.forEach(async property => {\n        const propertyOptions = options[property]\n\n        let data = await fetchProperty(propertyOptions.$fetch, item)\n\n        delete propertyOptions.$fetch\n\n        if (data !== null) {\n          data = await computeResults(data, propertyOptions)\n        }\n\n        item[property] = data\n      })\n\n      return Promise.resolve(item)\n    }\n\n    // returns a promise that resolves to the data\n    function fetchProperty (fetcher, item) {\n      try {\n        return fetcher.call(item, hook.app)\n      } catch (e) {\n        // console.error(e)\n        debug(e)\n        return Promise.resolve(null)\n      }\n    }\n  }\n}\n"]}