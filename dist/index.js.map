{"version":3,"sources":["../index.js"],"names":["options","hook","computeProperties","item","Promise","all","Object","keys","map","property","fetch","properties","Array","isArray","e","console","error","computeResults","items","data","result"],"mappings":";;;;;;;;kBAAe,UAAUA,OAAV,EAAmB;AAChC;AAAA,iCAAO,WAAgBC,IAAhB,EAAsB;AAC3B,YAAMC;AAAA,sCAAoB,WAAOC,IAAP,EAAaH,OAAb,EAAyB;AACjD,gBAAMI,QAAQC,GAAR,CAAYC,OAAOC,IAAP,CAAYP,OAAZ,EAAqBQ,GAArB;AAAA,0CAAyB,WAAMC,QAAN,EAAkB;AAC3D,kBAAIC,KAAJ,EAAWC,UAAX;;AAEA,kBAAIC,MAAMC,OAAN,CAAcb,QAAQS,QAAR,CAAd,CAAJ,EAAsC;AAAA,uDACdT,QAAQS,QAAR,CADc;;AACnCC,qBADmC;AAC5BC,0BAD4B;AAErC,eAFD,MAEO;AACLD,wBAAQV,QAAQS,QAAR,CAAR;AACD;;AAED,kBAAI;AACFN,qBAAKM,QAAL,IAAiB,MAAMC,MAAMP,IAAN,CAAvB;AACD,eAFD,CAEE,OAAOW,CAAP,EAAU;AACVX,qBAAKM,QAAL,IAAiB,IAAjB;AACAM,wBAAQC,KAAR,CAAcF,CAAd;AACA;AACD;;AAED,kBAAIH,UAAJ,EAAgB;AACd,sBAAMM,eAAed,KAAKM,QAAL,CAAf,EAA+BE,UAA/B,CAAN;AACD;AACF,aApBiB;;AAAA;AAAA;AAAA;AAAA,eAAZ,CAAN;AAqBD,SAtBK;;AAAA;AAAA;AAAA;AAAA,UAAN;;AAwBA,YAAMM,iBAAiB,SAAjBA,cAAiB,CAACd,IAAD,EAAOH,OAAP,EAAmB;AACxC,cAAMkB,QAAQN,MAAMC,OAAN,CAAcV,KAAKgB,IAAnB,IAA2BhB,KAAKgB,IAAhC,GAAwCP,MAAMC,OAAN,CAAcV,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAAnF;;AAEA,eAAOC,QAAQC,GAAR,CAAYa,MAAMV,GAAN,CAAU;AAAA,iBAAQN,kBAAkBC,IAAlB,EAAwBH,OAAxB,CAAR;AAAA,SAAV,CAAZ,CAAP;AACD,OAJD;;AAMA,YAAMiB,eAAehB,KAAKmB,MAApB,EAA4BpB,OAA5B,CAAN;;AAEA,aAAOC,IAAP;AACD,KAlCD;;AAAA;AAAA;AAAA;AAAA;AAmCD,C","file":"index.js","sourcesContent":["export default function (options) {\n  return async function (hook) {\n    const computeProperties = async (item, options) => {\n      await Promise.all(Object.keys(options).map(async property => {\n        let fetch, properties\n\n        if (Array.isArray(options[property])) {\n          [fetch, properties] = options[property]\n        } else {\n          fetch = options[property]\n        }\n\n        try {\n          item[property] = await fetch(item)\n        } catch (e) {\n          item[property] = null\n          console.error(e)\n          return\n        }\n\n        if (properties) {\n          await computeResults(item[property], properties)\n        }\n      }))\n    }\n\n    const computeResults = (item, options) => {\n      const items = Array.isArray(item.data) ? item.data : (Array.isArray(item) ? item : [item])\n\n      return Promise.all(items.map(item => computeProperties(item, options)))\n    }\n\n    await computeResults(hook.result, options)\n\n    return hook\n  }\n}\n"]}